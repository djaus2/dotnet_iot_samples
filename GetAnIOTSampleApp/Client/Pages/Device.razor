@page "/device/{DeviceNameProjectName}"
@using GetAnIOTSampleApp.Shared
@using ProjectClasses
@using GetAnIOTSampleApp.Client.Components
@inject Services.SamplesClient _SamplesClient
@inject NavigationManager navigationManager

<h3>Device Sample Project</h3>
<table>
    <tr><td align="right"><b><i>Project Name:</i></b></td><td>@project.Name</td></tr>
    <tr><td align="right"><b><i>Device:</i></b></td><td>@project.DeviceName</td></tr>
    <tr><td align="right"><b><i>Project C# Filename:</i></b></td><td>@project.ProjectCSFileName</td></tr>
    <tr><td align="right"><b><i>Project Filename:</i></b></td><td>@project.ProjectFileName</td></tr>
    <tr><td align="right"><b><i>Project Circuit:</i></b></td><td>@project.ProjectPNGFileName</td></tr>
</table>
<br />
<MarkdownModel Content=@textToCopy />
<br />


@code {
    [Parameter]
    public string DeviceNameProjectName { get; set; } = "";

    private Project project;
    public string filecontents;
    public string textToCopy;

    public string DeviceName { get; set; }
    public string ProjectName { get; set; }

    private Dictionary<string, List<Project>> Projects { get; set; }

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
        if (done)
            navigationManager.NavigateTo("/index");
    }


    bool done = false;
    protected async override Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        project = new Project();

        done = false;
        if ((DeviceNameProjectName == "none") || (DeviceNameProjectName == null) || (DeviceNameProjectName == ""))
        {
            if (Services.SamplesClient.CurrentProject == null)
            {
                done = true;
            }
            else
            {
                DeviceName = Services.SamplesClient.CurrentProject.DeviceName;
                ProjectName = Services.SamplesClient.CurrentProject.Name;

                DeviceNameProjectName = DeviceName +
                "-" + ProjectName;
            }
        }
        else
        {
            string[] names = DeviceNameProjectName.Split(new char[] { '-' });
            if (names.Length < 2)
            {
                done = false;

            }
            else if ((names[0] == "") || (names[1] == ""))
            {
                done = false;
            }
            else
            {
                DeviceName = names[0];
                ProjectName = names[1];
            }
        }
        if (done)
        {
            textToCopy = "";

        }
        else
        {
            Projects = GetAnIOTSampleApp.Client.Services.SamplesClient.Projects;

            List<string> keys = new List<string>(Projects.Keys);
            List<List<Project>> values = (Projects.Values).ToList();
            var n = Projects.Count;

            List<Project> projects = Projects[DeviceName];
            var xproject = from p in projects where p.Name == ProjectName select p;
            Services.SamplesClient.CurrentProject = xproject.FirstOrDefault();
            project = Services.SamplesClient.CurrentProject;



            project = Services.SamplesClient.CurrentProject;

            string DeviceNameProjectNameType = project.DeviceName + "-" + project.Name + "-ReadMe";

            filecontents = await _SamplesClient.GetFile(DeviceNameProjectNameType);
            int start = filecontents.IndexOf("![");
            int end = filecontents.IndexOf(")", start);
            if ((start > 0) && (end > 0))
            {

                textToCopy = filecontents.Substring(0, start - 1);
                textToCopy += "&nbsp;See Circuit Page.<br/>";
                textToCopy += filecontents.Substring(end + 1);
            }
        }
    }

}




}
