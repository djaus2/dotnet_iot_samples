@page "/"
@page "/index"
@using GetAnIOTSampleApp.Shared
@using ProjectClasses
@inject HttpClient Http
@inject Services.SamplesClient _SamplesClient
@inject NavigationManager navigationManager
@using  GetAnIOTSampleApp.Client.Services;

<h1>dotnet/iot Sample Apps</h1>
<h2>Index</h2>

<i><b>An Index into the Device Sample projects in dotnet/iot (and the mirror djaus2/iot) on GitHub:</b></i>
<ul>
    <li><a href="https://github.com/dotnet/iot">dotnet/iot</a></li>
    <li><a href="https://github.com/djaus2/iot">djaus2/iot</a></li>
</ul>
<br/>
@if (Alpha == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>First Letter</th>
                <th>Total No. Samples</th>
                <th>Device</th>
                <th>Sample App/s</th>

            </tr>
        </thead>
        <tbody>
            @foreach (var a in AlphaCount)
            {
                <tr>
                    <td><button id=p.Key class="btn btn-secondary" @onclick="@(e => SampleMe(a.Key))">@a.Key</button></td>
                    <td>@a.Count&nbsp;Samples</td>
                </tr>

                @if (AlphaViz[a.Key])
                {
                    @foreach (var b in AlphaDict[a.Key])
                    {

                        @if (b.Count < 2)
                        {
                            <tr>
                                <td>.</td>
                                <td>.</td>
                                <td>@b.Key</td>
                                @foreach (var p in Projects[b.Key])
                                {
                                    <td><button id=p.Name class="btn btn-primary" @onclick="@(e => SampleMe2(p.DeviceName,p.Name))">@p.Name</button></td>
                                }
                            </tr>
                        }
                        else
                        {
                            <tr>
                                <td>.</td>
                                <td>.</td>
                                <td>@b.Key</td>
                                <td>@b.Count&nbsp;Samples</td>
                            </tr>
                            @foreach (var p in Projects[b.Key])
                            {
                                <tr>
                                    <td>.</td>
                                    <td>.</td>
                                    <td>.</td>
                                    <td><button id=p.Name class="btn btn-primary" @onclick="@(e => SampleMe2(p.DeviceName,p.Name))">@p.Name</button></td>
                                </tr>
                            }
                        }
                    }
                }
            }

        </tbody>
    </table>
}

@code {


    private WeatherForecast[] forecasts;
    private List<IGrouping<char, KeyValuePair<string, List<Project>>>> Alpha = null;
    public static List<AlphaCount> AlphaCount { get; set; }
    private Dictionary<char, List<SampleCount>> AlphaDict { get; set; }
    private Dictionary<char, bool> AlphaViz { get; set; }
    private Dictionary<string, List<Project>> Projects { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        AlphaViz = new Dictionary<char, bool>();
        forecasts = await Http.GetFromJsonAsync<WeatherForecast[]>("WeatherForecast");

        if (GetAnIOTSampleApp.Client.Services.SamplesClient.Samples == null)
            Alpha = (await _SamplesClient.Get()).ToList();
        else
            Alpha = GetAnIOTSampleApp.Client.Services.SamplesClient.Samples;
        AlphaCount = GetAnIOTSampleApp.Client.Services.SamplesClient.AlphaCount;

        foreach (var z in AlphaCount)
        {
            AlphaViz.Add(z.Key, false);
        }
        if (AlphaViz.Keys.Contains(GetAnIOTSampleApp.Client.Services.SamplesClient.CurrentIndex))
        {
            AlphaViz[GetAnIOTSampleApp.Client.Services.SamplesClient.CurrentIndex] = true;
        }
        AlphaDict = GetAnIOTSampleApp.Client.Services.SamplesClient.AlphaDict;
        Projects = GetAnIOTSampleApp.Client.Services.SamplesClient.Projects;
    }

    void SampleMe(char key)
    {
        bool done = false;
        AlphaViz[key] = true;
        if (AlphaViz.Keys.Contains(GetAnIOTSampleApp.Client.Services.SamplesClient.CurrentIndex))
        {
            if (key == GetAnIOTSampleApp.Client.Services.SamplesClient.CurrentIndex)
                done = true;
            AlphaViz[GetAnIOTSampleApp.Client.Services.SamplesClient.CurrentIndex] = false;
            GetAnIOTSampleApp.Client.Services.SamplesClient.CurrentIndex = '=';
            GetAnIOTSampleApp.Client.Services.SamplesClient.CurrentProject = null;
        }
        if (!done)
        {
            if (AlphaViz.Keys.Contains(key))
            {
                GetAnIOTSampleApp.Client.Services.SamplesClient.CurrentIndex = key;
                AlphaViz[key] = true;
            }
        }
        StateHasChanged();
    }

    void SampleMe2(string device, string projectName)
    {
        string target = $"/device/{device}-{projectName}";

        navigationManager.NavigateTo(target);
    }
}

